var $;
var aiTrack = /** @class */ (function () {
    function aiTrack(questionName, activityGoal, trackType, testingBoolean) {
        this.testing = false;
        console.log(trackType);
        if (typeof(testingBoolean) != "undefined") {
            this.testing = (testingBoolean == 1) ? true : false;
        }
        this.trackType = trackType;
        this.uidAnswers = [];
        this.triggers = null;
        this.uidClicks = [];
        this.uidCorrectClicks = [];
        this.uidClicksIntervals = [];
        this.questions = [];
        this.uidCords = [];
        this.goal = 0;
        this.progress = 0;
        this.question = "";
        this.finished = false;
        this.allCorrect = false;
        this.time = 0;
        this.timer = 0;
        this.startedTime = null;
        this.endedTime = null;
        this.today = new Date().toLocaleString();
        this.lvlChoice = 0;
        this.lvl = this.GetParameterByName('level');
        this.question = questionName;

//=================================Ping VARs=============================================
        this.pingTesting = false;
        this.pings = [];
        this.pingCount = 0;

        this.ptime = 0;
        this.ptimeTrigger = 60;


        //creates the generic message for users that are inactive
        this.genMsg = "You have been inactive form some time.";
        this.genMsgCol = "o";
        this.genMsgActive = false;

        //this.createfn();
        this.Events();
        this.SetGoal(activityGoal);

    }

    //=====================================Ping Methods========================
    aiTrack.prototype.createfn = function()
    {

    //debugger;
    var pingDiv = document.createElement("div");
    pingDiv.id = "pingAlert";
    pingDiv.className = "alert";
    pingDiv.style.display = "none";
    document.getElementsByTagName('body')[0].prepend(pingDiv);

    var pingSpan = document.createElement("div");
    pingSpan.className = "closebtn";
    pingSpan.onclick = function() { ClosePing(); };
    pingSpan.innerHTML = "&times;";
    document.getElementById('pingAlert').appendChild(pingSpan);

    var pingSpanText = document.createElement("div");
    pingSpanText.id = "pingAlertText";
    document.getElementById('pingAlert').appendChild(pingSpanText);

    var pinglay = document.createElement("div");
    pinglay.id = "overlay";
    pinglay.onclick = function() { ClosePing(); };
    document.getElementsByTagName('body')[0].prepend(pinglay);

    var logoImg = document.createElement("img");
    logoImg.className = "imgLogo";
    logoImg.src = "ideaLogo.png";
    logoImg.onclick = function() { ClosePing(); };
    document.getElementById('overlay').appendChild(logoImg);

    var InfoImg = document.createElement("img");
    InfoImg.id = "InfoImg";
    InfoImg.src = "";
    InfoImg.onclick = function() { ClosePing(); };
    document.getElementById('overlay').appendChild(InfoImg);

    var InfoVid = document.createElement("video");
    InfoVid.id = "InfoVid";
    InfoVid.setAttribute("autoplay", "true");
    InfoVid.onclick = function() { ClosePing(); };
    InfoVid.src = "";
    document.getElementById('overlay').appendChild(InfoVid);
    document.getElementById("InfoVid").style.display = "none";
    }

    //set custom general message
    aiTrack.prototype.SetGenMsg = function (msg,col,t = this.ptimeTrigger)
    {
        this.genMsg = msg;
        this.genMsgCol = col;
        this.ptimeTrigger = t;
        this.genMsgActive = true;

        if(this.genMsgActive)
        {
            var _this = this;
            setInterval(function () {
                _this.StartTimer();
            }, 1000);
        }
    }

    aiTrack.prototype.startTime = function() {
        this.startedTime = new Date();
    }

    aiTrack.prototype.touchCoordinates = function(x, y) {
        let nowDate = new Date();
        let seconds = Math.round(((nowDate - this.startedTime) / 1000));
        this.AddUidClickInterval(seconds);
        this.AddUidCords(Math.round(x), Math.round(y));
    }

    aiTrack.prototype.trackTriggers = function(obj) {
        if (obj == null) {
            return ;
        }
        const allTriggers = obj.instances;
        let that = this;
        allTriggers.forEach(function(trigger) {
            const goalVal = trigger.behavior_insts[0];
            goalVal.goal = that.goal;
            goalVal.interactiveType = that.trackType;
        });
        this.triggers = obj;
    }

    aiTrack.prototype.isRunning = function() {
        return (this.startedTime != null);
    }

    aiTrack.prototype.setAnswersForDragAndDrop = function() {
        const instances = this.triggers.instances;
        let index = 1;
        let that = this;
        instances.forEach(function(instance) {
            // console.log(instance.behavior_insts);
            console.log(instance.behavior_insts[0].givenValue);
            const gValue = instance.behavior_insts[0].givenValue.toString();
            console.log(instance.behavior_insts[0].correctValue);
            const cValue = instance.behavior_insts[0].correctValue.toString();
            const isC = (gValue === cValue) ? 1 : 0;
            that.AddUidAnswers(isC, ++index);
            that.AdduidCorrectClicks(cValue);
            that.AddUidClick(gValue);
        });
        // console.log(this.triggers.instances);
    }

    aiTrack.prototype.setAnswersForSpecificGoal = function() {
        const instances = this.triggers.instances;
        let index = 1;
        let that = this;
        const correctArray = instances.filter(function(instance) {
            return (instance.behavior_insts[0].isCorrect);
        });
        console.log(correctArray);
        instances.forEach(function(instance) {
            console.log(instance.behavior_insts[0].givenValue);
            const gValue = instance.behavior_insts[0].givenValue.toString();
            console.log(instance.behavior_insts[0].correctValue);
            const cValue = instance.behavior_insts[0].correctValue.toString();
            const isC = (gValue === cValue) ? 1 : 0;
            that.AddUidAnswers(isC, ++index);
            that.AdduidCorrectClicks(cValue);
            that.AddUidClick(gValue);
        });
        // console.log(this.triggers.instances);
    }

    aiTrack.prototype.calculateAnswers = function() {
        switch (this.trackType) {
            case 1:
                this.setAnswersForDragAndDrop();
                break;
            case 2:
                this.setAnswersForSpecificGoal();
                break;
            case 3:
                break;
            default:
                break;
        }
        return this.CheckWork();
    }

    aiTrack.prototype.finishInterActive = function() {
        this.endedTime = new Date();
        this.time = Math.round((this.endedTime - this.startedTime) / 1000);
        if (this.triggers == null) {
            return this.CheckWork();
            // return this.CheckWork();
        }
        return this.calculateAnswers();
        // return this.calculateAnswers();
    }

    aiTrack.prototype.setAnswer = function(isCorrect, givenIndex, givenValue, correctValue) {
        if (this.isCorrect < 0 && this.isCorrect > 1) {
            alert("Please set value 0 or 1 for correct as specified.");            
            return ;
        }
        if (this.givenIndex < 1 && this.givenIndex > this.goal) {
            alert("Index is incorrect, please make sure it is between 1 and the goal max");
            return ;
        }
        this.AddUidAnswers(isCorrect, givenIndex);
        this.AdduidCorrectClicks(correctValue);
        this.AddUidClick(givenValue);
    }

    aiTrack.prototype.addAnswer = function(question, isCorrect, givenIndex, givenValue, correctValue) {
        if (this.isCorrect < 0 && this.isCorrect > 1) {
            alert("Please set value 0 or 1 for correct as specified.");            
            return ;
        }
        if (this.givenIndex < 1 && this.givenIndex > this.goal) {
            alert("Index is incorrect, please make sure it is between 1 and the goal max");
            return ;
        }
        this.questions.push({
            question,
            correct: isCorrect,
            givenValue,
            correctValue
        })
        this.AddUidAnswers(isCorrect, givenIndex);
        this.AdduidCorrectClicks(correctValue);
        this.AddUidClick(givenValue);
    }

  aiTrack.prototype.StartTimer = function ()
    {
        this.ptime += 1;
        if(this.ptime == this.ptimeTrigger)
        {
            this.PingOut(this.genMsg,this.genMsgCol);
            this.ptime = 0;
        }
    }

    aiTrack.prototype.Events = function ()
      {
          //reset time when clicked on screen
          var _this = this;
          document.getElementById("c2canvasdiv").addEventListener("click", function(){
              _this.ptime = 0;
          });
      }
    //activate general message
    aiTrack.prototype.ActivateGenMsg = function ()
    {
        this.SetGenMsg(this.genMsg,this.genMsgCol,this.ptimeTrigger);
    }

    //Send message to the user
    aiTrack.prototype.PingOutImg = function (msg,path,col="o")
    {
        document.getElementById('InfoImg').src = path;

        this.pings.push(msg);

        switch(col)
        {
            case "r":
                this.UpdatePing(msg,"#cc3300");//red
                break;
            case "g":
                this.UpdatePing(msg,"#669900");//green
                break;
            case "b":
                this.UpdatePing(msg,"#0066cc");//blue
                break;
            case "o":
                this.UpdatePing(msg,"#ff9900");//orange
                break;
            default:
                this.UpdatePing(msg,"#ff9900");//orange
                break;
        }

    }

    //Send message to the user
    aiTrack.prototype.PingOutVid = function (msg,path,col="o")
    {
        document.getElementById('InfoVid').src = path;
        document.getElementById("InfoVid").style.display = "block";

        this.pings.push(msg);

        switch(col)
        {
            case "r":
                this.UpdatePing(msg,"#cc3300");//red
                break;
            case "g":
                this.UpdatePing(msg,"#669900");//green
                break;
            case "b":
                this.UpdatePing(msg,"#0066cc");//blue
                break;
            case "o":
                this.UpdatePing(msg,"#ff9900");//orange
                break;
            default:
                this.UpdatePing(msg,"#ff9900");//orange
                break;
        }

    }

    //Send message to the user
    aiTrack.prototype.PingOut = function (msg,col="o")
    {

        this.pings.push(msg);

        switch(col)
        {
            case "r":
                this.UpdatePing(msg,"#cc3300");//red
                break;
            case "g":
                this.UpdatePing(msg,"#669900");//green
                break;
            case "b":
                this.UpdatePing(msg,"#0066cc");//blue
                break;
            case "o":
                this.UpdatePing(msg,"#ff9900");//orange
                break;
            default:
                this.UpdatePing(msg,"#ff9900");//orange
                break;
        }

    }

    //Get overall status
    aiTrack.prototype.PingResults = function ()
    {
        this.pingCount = this.pings.length;
        var Feedback = "";
        for(var i = 0; i < this.pingCount; i++)
        {
            Feedback += this.pings[i];
            Feedback += "\n";
        }

        if(this.pingTesting)
        {
            alert("Student got: " + this.pingCount + " pings.\n\nPing Feedback:\n" + this.Feedback);
        }

    }

    aiTrack.prototype.UpdatePing = function (ping_MSG,ping_COL)
    {
        document.getElementById("pingAlert").style.backgroundColor = ping_COL;
        document.getElementById("pingAlertText").innerHTML = ping_MSG;
        document.getElementById("pingAlert").style.display = "block";
        document.getElementById("overlay").style.display = "block";
    }


    aiTrack.prototype.SetGoal = function (newGoal1) {
        this.goal = 0;
        this.progress = 0;
        this.finished = false;
        this.allCorrect = false;
        this.goal = newGoal1;
        for (var i = 0; i < newGoal1 + 1; i++) {
            this.uidAnswers.push(0);
        }
        if (this.testing) {
            alert("Question: "+ this.question +"\nYour goal: " + this.goal);
        }
    };
    aiTrack.prototype.AddToProgress = function (progressToAdd1) {
        this.progress += progressToAdd1;
    };
    aiTrack.prototype.AddUidAnswers = function (point, newIndex) {
        this.uidAnswers[newIndex] = point;
        this.AddToProgress(point);
        if (this.testing) {
            //alert(uidAnswers);
        }
    };
    aiTrack.prototype.AddUidClick = function (target) {
        var newTarget = target;
        this.uidClicks.push(newTarget);
    };
    aiTrack.prototype.AdduidCorrectClicks = function (target) {
        var newTarget = target;
        this.uidCorrectClicks.push(newTarget);
    };
    aiTrack.prototype.AddUidCords = function (cordX, cordY) {
        var newCordX = cordX;
        var newCordY = cordY;
        var newSubCords = [cordX, cordY];
        this.uidCords.push(newSubCords);
    };
    aiTrack.prototype.AddUidClickInterval = function (interval) {
        var newInterval = interval;
        this.uidClicksIntervals.push(newInterval);
    };
    aiTrack.prototype.SetTime = function (newTime) {
        this.time = newTime;
    };
    aiTrack.prototype.VidHasEnded = function () {
        this.finished = true;
        //POST the data to server side
        parent.postMessage({ question: this.question, finished: this.finished }, '*');
        if (testing) {
            alert("Question: " + this.question + "\nFinished: " + this.finished);
        }
    };
    aiTrack.prototype.GetParameterByName = function (name, url) {
        if (!url)
            url = window.location.href;
        if (name == null)
            return '';
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"), results = regex.exec(url);
        if (!results)
            return null;
        if (!results[2])
            return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    };
    aiTrack.prototype.GetLvl = function () {
        return this.lvl;
    };
    aiTrack.prototype.LoadLvl = function (newLvlChoice) {
        this.lvlChoice = newLvlChoice;
        //POST the data to server side
        parent.postMessage({ LvlChoice: this.lvlChoice }, '*');
        if (testing) {
            alert("LVL Choice: " + this.lvlChoice);
        }
    };
    aiTrack.prototype.CheckWork = function () {
        this.finished = true;
        if (this.progress == this.goal) {
            this.allCorrect = true;
        }

        if (this.pings === undefined || this.pings.length == 0)
        {
            this.pings.push("N/A");
        }

        this.uidAnswers.shift();
        var newUidAnswers = this.uidAnswers.join();
        var newUidClicks = this.uidClicks.join();
        var newUidCorrectClicks = this.uidCorrectClicks.join();
        var newUidClicksIntervals = this.uidClicksIntervals.join();
        var newUidCords = this.uidCords.join(";");
        var newPings = this.pings.join();
        this.pingCount = this.pings.length;

        parent.postMessage({ question: this.question, uidAnswers: newUidAnswers, uidClicks: newUidClicks, uidCorrectClicks: newUidCorrectClicks, uidClicksIntervals: newUidClicksIntervals, uidCords: newUidCords, progress: this.progress, goal: this.goal, finished: this.finished, allCorrect: this.allCorrect, time: this.time, date: this.today,ping_count: this.pingCount, pings: newPings }, '*');
        if (this.testing) {
            alert("Question: "+this.question+"\nUidAnswers: "+newUidAnswers+"\nUidClicks: "+newUidClicks+"\nuidCorrectClicks: "+newUidCorrectClicks+"\nUidClicksIntervals: "+newUidClicksIntervals+"\nUidCords: "+newUidCords+"\nFinished: "+this.finished+"\nAll Correct: "+this.allCorrect+"\nGoal: "+this.goal+"\nProgress: "+this.progress+"\nTime: "+this.time+"\nDate: "+this.today);
        }
        this.startedTime = null;
    };
    return aiTrack;
}());

function ClosePing()
{
    document.getElementById("pingAlert").style.display = "none";
    document.getElementById("overlay").style.display = "none";
    document.getElementById('InfoImg').src = "";
    document.getElementById('InfoVid').src = "";
    document.getElementById("InfoVid").style.display = "none";
}
